syntax = "proto3";

option go_package = "github.com/kanisterio/kanister/pkg/kanx";

package kanx;

service ProcessService {
  rpc CreateProcess (CreateProcessRequest) returns (Process) {}
  rpc GetProcess (ProcessPidRequest) returns (Process) {}
  rpc RemoveProcess (ProcessPidRequest) returns (Process) {}
  rpc SignalProcess (SignalProcessRequest) returns (Process) {}
  rpc WaitProcess (ProcessPidRequest) returns (Process) {}
  rpc ListProcesses (ListProcessesRequest) returns (stream Process) {}
  rpc Stdout (ProcessPidRequest) returns (stream StdoutOutput) {}
  rpc Stderr (ProcessPidRequest) returns (stream StderrOutput) {}
}

message CreateProcessRequest {
    string name = 1;
    repeated string args = 2;
}

message ListProcessesRequest {
}

message ProcessPidRequest {
  int64 pid = 1;
}

message GetProcessRequest {
  int64 pid = 1;
}

message RemoveProcessRequest {
  int64 pid = 1;
}

message SignalProcessRequest {
  int64 pid = 1;
  int32 signal = 2;
}

message WaitProcessRequest {
  int64 pid = 1;
}

message ProcessOutputRequest {
  int64 pid = 1;
}

message Process {
  int64 pid = 1;
  ProcessState state = 2;
  int64 exitCode = 3;
  string exitErr = 4;
}

enum ProcessState {
  PROCESS_STATE_UNSPECIFIED = 0;
  PROCESS_STATE_RUNNING = 1;
  PROCESS_STATE_SUCCEEDED = 2;
  PROCESS_STATE_FAILED = 3;
}

enum ProcessOutputStream {
  PROCESS_OUTPUT_UNSPECIFIED = 0;
  PROCESS_OUTPUT_STDOUT = 1;
  PROCESS_OUTPUT_STDERR = 2;
}

enum OutputPort {
  OUTPUT_UNSPECIFIED = 0;
  OUTPUT_STDOUT = 1;
  OUTPUT_STDERR = 2;
}

message StdoutOutput {
  string stream = 1;
}

message StderrOutput {
  string stream = 1;
}
